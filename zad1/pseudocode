

def split(M) -> dzieli macierz na 4 równe części C11, C12, C21, C22


def stack(a, b, c, d) -> łączy ze sobą części macierzy a, b, c, d w jedną macierz A


def trivial(A, B) -> zwraca wymnożone macierze w sposób bazowy


def strassen(A, B):
    #   Jeśli mamy przypadek gdzie macierz jest wystarczająco mała
    if len(A) <= 2:
        return trivial(A, B)

    #   Tutaj dzielimy dwie macierze na 4 kawałki (w sumie 8 kawałków):
    a11, a12, a21, a22 = split(A)
    b11, b12, b21, b22 = split(B)

    #   Następnie liczymy poszczególne elementy p potrzebne do złożenia macierzy wynikowej według wzoru z wykładu
    p1 = multiply(a11 + a22, b11 + b22)
    p2 = multiply(a21 + a22, b11)
    p3 = multiply(a11, b12 - b22)
    p4 = multiply(a22, b21 - b11)
    p5 = multiply(a11 + a12, b22)
    p6 = multiply(a21 - a11, b11 + b12)
    p7 = multiply(a12 - a22, b21 + b22)

    #   Liczymy poszczególne elementy macierzy wynikowej
    C11 = p1 + p4 - p5 + p7
    C12 = p3 + p5
    C21 = p2 + p4
    C22 = p1 - p2 + p3 + p6

    #   Połącz elementy cząstkowe w macierz wynikową
    return stack(C11, C12, C21, C22)


def binet(A, B):
    #   ar to rozmiar macierzy
    ar, _ = A.shape
    #   Jeśli mamy przypadek gdzie macierz jest wystarczająco mała
    if ar < 3:
        return trivial(A, B)

    #   Tutaj dzielimy dwie macierze na 4 kawałki (w sumie 8 kawałków):
    a = split(A)
    b = split(B)

    #   Mnożymy i dodajemy macierze zgodnie z wykładem
    C0 = multiply(a[0], b[0]) + multiply(a[1], b[2])
    C1 = multiply(a[0], b[1]) + multiply(a[1], b[3])
    C2 = multiply(a[2], b[0]) + multiply(a[3], b[2])
    C3 = multiply(a[2], b[1]) + multiply(a[3], b[3])

    #   Połącz elementy cząstkowe w macierz wynikową
    return stack(C0, C1, C2, C3)


def multiply(A: np.ndarray, B: np.ndarray) -> np.ndarray:
    ar, ac = A.shape
    br, bc = B.shape

    #   Jeśli rozmiar jest mniejszy bądź równy niż ustalony threshold, wykonujemy algorytm strassena
    if ar <= 2 ** l:
        return strassen(A, B)
    #   Wpp bineta
    return binet(A, B)


#   Pętla służąca do włączenia testów dla macierzy rozmiaru od 2^2 do 2^10
for size in range(2, 10):
    flops = 0

    n = 2 ** size
    A = np.random.random((n, n))
    B = np.random.random((n, n))

    st = time.time()
    multiply(A, B)
    et = time.time()

    elapsed_time = et - st
    print(elapsed_time, size, l, flops)
